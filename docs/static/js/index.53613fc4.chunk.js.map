{"version":3,"sources":["webpack:///./examples/index.js","webpack:///./examples/Demo.js","webpack:///./examples/DemoList.js","webpack:///./examples/demos/demo1.js","webpack:///./examples/demos/Demo2.js","webpack:///./examples/demos/Demo3.js","webpack:///./examples/demos/Demo4.js","webpack:///./src/index.js"],"names":["ReactDOM","render","document","getElementById","Demo","current","DemoList","item","e","this","setState","state","className","map","i","onClick","onDemoChange","bind","label","component","Component","Demo1","Demo2","Demo3","Demo4","DEMO","visible","toggleClick","timeout","transition","onEnter","node","hide","stop","fadeIn","onExit","fadeOut","style","left","top","mask","dom","_defer","resolve","of","my","at","_defer2","Fragment","toggleClick2","height","position","border","background","color","padding","maskTransition","Test","console","log","animateClassNames","appear","appearActive","appearDone","enter","enterActive","enterDone","exit","exitActive","exitDone","maskAnimateClassNames","forceUpdate","destroyOnHide","classNames","undefined","maskProps","fixed","Popup","EXITED","nextProps","nextState","status","transitionStatus","props","lazyMount","key","_refs","findDOMNode","appearing","display","onExited","prefix","maskStyle","maskClassName","MaskComponent","maskComponent","classes","mStyle","shouldHide","addEndListener","_","cb","in","unmountOnExit","mountOnEnter","ref","saveRef","children","rootClassName","RootComponent","rootComponent","childProps","rootProps","pStyle","Provider","value","renderPopupMask","React","propTypes","PropTypes","string","object","bool","elementType","oneOfType","number","defaultProps"],"mappings":"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","file":"static/js/index.53613fc4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./style/index.scss\";\r\nimport \"./style/animate.scss\";\r\n\r\nimport \"../src/style/index.css\";\r\n\r\nimport Demo from \"./Demo\";\r\n\r\nReactDOM.render(<Demo />, document.getElementById(\"demo\"));\r\n","import React, { Component } from 'react';\r\nimport DemoList from './DemoList';\r\n\r\nexport default class Demo extends Component {\r\n\r\n    state = {\r\n        current: DemoList[0]\r\n    }\r\n\r\n    onDemoChange(item, e) {\r\n        this.setState({\r\n            current: item\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { current } = this.state;\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"slider\">\r\n                    {\r\n                        DemoList.map((item, i) => {\r\n                            return (\r\n                                <div\r\n                                    className={current === item ? 'active' : ''}\r\n                                    onClick={this.onDemoChange.bind(this, item)}\r\n                                >\r\n                                    {item.label}\r\n                                </div>\r\n                            );\r\n                        })\r\n                    }\r\n                </div>\r\n                <div className=\"content\">\r\n                    {current ? <current.component /> : null}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import Demo1 from \"./demos/demo1\";\r\nimport Demo2 from \"./demos/Demo2\";\r\nimport Demo3 from \"./demos/Demo3\";\r\nimport Demo4 from \"./demos/Demo4\";\r\n\r\nexport default [\r\n    {\r\n        label: \"基本功能\",\r\n        component: Demo1\r\n    },\r\n    {\r\n        label: \"遮罩层\",\r\n        component: Demo2\r\n    },\r\n    {\r\n        label: \"使用CSS动画\",\r\n        component: Demo3\r\n    },\r\n    {\r\n        label: \"fixed\",\r\n        component: Demo4\r\n    }\r\n];\r\n","import React, { Component } from \"react\";\r\nimport Popup from \"../../src\";\r\nimport $ from \"jquery\";\r\n\r\nexport default class DEMO extends Component {\r\n    state = {\r\n        visible: false\r\n    };\r\n\r\n    toggleClick = e => {\r\n        const { visible } = this.state;\r\n        this.setState({\r\n            visible: !visible\r\n        });\r\n    };\r\n\r\n    componentDidMount() {\r\n        // setInterval(this.forceUpdate.bind(this), 1000);\r\n    }\r\n\r\n    render() {\r\n        const { visible } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <button onClick={this.toggleClick}>\r\n                    {visible ? \"关闭\" : \"显示\"}\r\n                </button>\r\n                <Popup\r\n                    visible={visible}\r\n                    timeout={500}\r\n                    transition={{\r\n                        onEnter: node => {\r\n                            $(node).hide();\r\n                            $(node)\r\n                                .stop()\r\n                                .fadeIn(500);\r\n                        },\r\n                        onExit: node => {\r\n                            $(node)\r\n                                .stop()\r\n                                .fadeOut(500);\r\n                        }\r\n                    }}\r\n                    style={{\r\n                        left: 10,\r\n                        top: 10\r\n                    }}\r\n                >\r\n                    <div className=\"dialog\">center...</div>\r\n                </Popup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\nimport Popup from \"../../src\";\r\nimport $ from \"jquery\";\r\n\r\nexport default class DEMO extends Component {\r\n    state = {\r\n        visible: true,\r\n        mask: true\r\n    };\r\n\r\n    toggleClick = e => {\r\n        const { visible } = this.state;\r\n        this.setState({\r\n            visible: !visible\r\n        });\r\n    };\r\n\r\n    toggleClick2 = e => {\r\n        const { mask } = this.state;\r\n        this.setState({\r\n            mask: !mask\r\n        });\r\n    };\r\n\r\n    refButton = dom => {\r\n        this._defer.resolve({\r\n            of: dom,\r\n            my: \"left top\",\r\n            at: \"left bottom\"\r\n        });\r\n    };\r\n\r\n    refButton2 = dom => {\r\n        this._defer2.resolve({\r\n            of: dom,\r\n            my: \"left center\",\r\n            at: \"right center\"\r\n        });\r\n    };\r\n    render() {\r\n        const { visible, mask } = this.state;\r\n\r\n        return (\r\n            <Fragment>\r\n                <div>\r\n                    <button onClick={this.toggleClick}>\r\n                        {visible ? \"关闭\" : \"显示\"}\r\n                    </button>\r\n                    <button onClick={this.toggleClick2}>\r\n                        {mask ? \"关闭遮罩层\" : \"显示遮罩层\"}\r\n                    </button>\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        height: \"calc(100% - 30px)\",\r\n                        position: \"relative\",\r\n                        border: \"1px solid #000\"\r\n                    }}\r\n                >\r\n                    <Popup\r\n                        visible={visible}\r\n                        mask={mask}\r\n                        style={{\r\n                            left: 10,\r\n                            top: 10,\r\n                            background: \"#ff5454\",\r\n                            color: \"#FFF\",\r\n                            padding: 10\r\n                        }}\r\n                        timeout={500}\r\n                        transition={{\r\n                            onEnter: node => {\r\n                                $(node).hide();\r\n                                $(node)\r\n                                    .stop()\r\n                                    .fadeIn(500);\r\n                            },\r\n                            onExit: node => {\r\n                                $(node)\r\n                                    .stop()\r\n                                    .fadeOut(500);\r\n                            }\r\n                        }}\r\n                        maskTransition={{\r\n                            onEnter: node => {\r\n                                $(node).hide();\r\n                                $(node)\r\n                                    .stop()\r\n                                    .fadeIn(500);\r\n                            },\r\n                            onExit: node => {\r\n                                $(node)\r\n                                    .stop()\r\n                                    .fadeOut(500);\r\n                            }\r\n                        }}\r\n                    >\r\n                        <div>center2...</div>\r\n                    </Popup>\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\nimport Popup from \"../../src\";\r\n\r\nlet i = 1;\r\n\r\nfunction Test() {\r\n    console.log(\"1\");\r\n    return <a>Test a{i++}</a>;\r\n}\r\n\r\nconst animateClassNames = {\r\n    appear: \"animated\",\r\n    appearActive: \"fadeBottomIn\",\r\n    appearDone: \"done\",\r\n    enter: \"animated\",\r\n    enterActive: \"fadeBottomIn\",\r\n    enterDone: \"done\",\r\n    exit: \"animated\",\r\n    exitActive: \"fadeBottomOut\",\r\n    exitDone: \"done\"\r\n};\r\n\r\nconst maskAnimateClassNames = {\r\n    appear: \"animated\",\r\n    appearActive: \"fadeIn\",\r\n    appearDone: \"done\",\r\n    enter: \"animated\",\r\n    enterActive: \"fadeIn\",\r\n    enterDone: \"done\",\r\n    exit: \"animated\",\r\n    exitActive: \"fadeOut\",\r\n    exitDone: \"done\"\r\n};\r\n\r\nexport default class DEMO extends Component {\r\n    state = {\r\n        visible: true,\r\n        mask: true\r\n    };\r\n\r\n    toggleClick = e => {\r\n        const { visible } = this.state;\r\n        this.setState({\r\n            visible: !visible\r\n        });\r\n    };\r\n\r\n    toggleClick2 = e => {\r\n        const { mask } = this.state;\r\n        this.setState({\r\n            mask: !mask\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { visible, mask } = this.state;\r\n\r\n        return (\r\n            <Fragment>\r\n                <div>\r\n                    <button onClick={this.toggleClick}>\r\n                        {visible ? \"关闭\" : \"显示\"}\r\n                    </button>\r\n                    <button onClick={this.toggleClick2}>\r\n                        {mask ? \"关闭遮罩层\" : \"显示遮罩层\"}\r\n                    </button>\r\n                    <button onClick={() => this.forceUpdate()}>refresh</button>\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        height: \"calc(100% - 30px)\",\r\n                        position: \"relative\",\r\n                        border: \"1px solid #000\"\r\n                    }}\r\n                >\r\n                    <Popup\r\n                        visible={visible}\r\n                        mask={mask}\r\n                        destroyOnHide={false}\r\n                        style={{\r\n                            left: 10,\r\n                            top: 10,\r\n                            background: \"#ff5454\",\r\n                            color: \"#FFF\",\r\n                            padding: 10\r\n                        }}\r\n                        timeout={300}\r\n                        transition={{\r\n                            classNames: animateClassNames\r\n                        }}\r\n                        maskTransition={{\r\n                            classNames: maskAnimateClassNames\r\n                        }}\r\n                    >\r\n                        <div>\r\n                            center2...\r\n                            <Test />\r\n                        </div>\r\n                    </Popup>\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\nimport Popup from \"../../src\";\r\n\r\nconst animateClassNames = {\r\n    appear: \"animated\",\r\n    appearActive: \"fadeBottomIn\",\r\n    enter: \"animated\",\r\n    enterActive: \"fadeBottomIn\",\r\n    enterDone: undefined,\r\n    exit: \"animated\",\r\n    exitActive: \"fadeBottomOut\",\r\n    exitDone: undefined\r\n};\r\n\r\nconst maskAnimateClassNames = {\r\n    appear: \"animated\",\r\n    appearActive: \"fadeIn\",\r\n    enter: \"animated\",\r\n    enterActive: \"fadeIn\",\r\n    exit: \"animated\",\r\n    exitActive: \"fadeOut\"\r\n};\r\n\r\nexport default class DEMO extends Component {\r\n    state = {\r\n        visible: true,\r\n        mask: true\r\n    };\r\n\r\n    toggleClick = e => {\r\n        const { visible } = this.state;\r\n        this.setState({\r\n            visible: !visible\r\n        });\r\n    };\r\n\r\n    toggleClick2 = e => {\r\n        const { mask } = this.state;\r\n        this.setState({\r\n            mask: !mask\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { visible, mask } = this.state;\r\n\r\n        return (\r\n            <Fragment>\r\n                <div>\r\n                    <button onClick={this.toggleClick}>\r\n                        {visible ? \"关闭\" : \"显示\"}\r\n                    </button>\r\n                    <button onClick={this.toggleClick2}>\r\n                        {mask ? \"关闭遮罩层\" : \"显示遮罩层\"}\r\n                    </button>\r\n                    <button onClick={() => this.forceUpdate()}>refresh</button>\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        height: \"calc(100% - 30px)\",\r\n                        position: \"relative\",\r\n                        border: \"1px solid #000\"\r\n                    }}\r\n                >\r\n                    <Popup\r\n                        visible={visible}\r\n                        mask={mask}\r\n                        destroyOnHide={true}\r\n                        style={{\r\n                            background: \"#ff5454\",\r\n                            color: \"#FFF\",\r\n                            padding: 10\r\n                        }}\r\n                        transition={{\r\n                            classNames: animateClassNames\r\n                        }}\r\n                        maskTransition={{\r\n                            classNames: maskAnimateClassNames\r\n                        }}\r\n                        maskProps={{\r\n                            onClick: () => {\r\n                                this.toggleClick2();\r\n                            }\r\n                        }}\r\n                        fixed\r\n                        timeout={300}\r\n                    >\r\n                        <div>center2...</div>\r\n                    </Popup>\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport classnames from \"classnames\";\r\nimport TransitionGroupContext from \"react-transition-group/TransitionGroupContext\";\r\nimport { EXITED } from \"react-transition-group/Transition\";\r\nimport CSSTransition from \"react-transition-group/CSSTransition\";\r\n\r\nclass Popup extends React.Component {\r\n    transitionStatus = EXITED;\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        const status = this.transitionStatus;\r\n        return !(EXITED === status && !nextProps.visible);\r\n    }\r\n\r\n    shouldHide() {\r\n        const { lazyMount, visible } = this.props;\r\n        return !visible && !lazyMount;\r\n    }\r\n\r\n    _refs = {};\r\n    saveRef(key, component) {\r\n        this._refs[key] = component;\r\n    }\r\n\r\n    getPopupRootDOM() {\r\n        return ReactDOM.findDOMNode(this._refs[\"popupRoot\"]);\r\n    }\r\n\r\n    getPopupDOM() {\r\n        return ReactDOM.findDOMNode(this._refs[\"popup\"]);\r\n    }\r\n\r\n    getPopupMaskDOM() {\r\n        return ReactDOM.findDOMNode(this._refs[\"popupMask\"]);\r\n    }\r\n\r\n    onEnter({ onEnter }, node, appearing) {\r\n        const { destroyOnHide } = this.props;\r\n\r\n        if (onEnter) {\r\n            onEnter(node, appearing);\r\n        }\r\n\r\n        if (!destroyOnHide) {\r\n            node.style.display = \"\";\r\n        }\r\n    }\r\n\r\n    onExited({ onExited }, node) {\r\n        const { destroyOnHide } = this.props;\r\n\r\n        if (onExited) {\r\n            onExited(node);\r\n        }\r\n\r\n        if (!destroyOnHide) {\r\n            node.style.display = \"none\";\r\n        }\r\n    }\r\n\r\n    renderPopupMask() {\r\n        const {\r\n            prefix,\r\n            visible,\r\n            mask,\r\n            maskProps,\r\n            maskStyle,\r\n            maskClassName,\r\n            maskTransition,\r\n            lazyMount,\r\n            destroyOnHide,\r\n            fixed,\r\n            timeout,\r\n            maskComponent: MaskComponent\r\n        } = this.props;\r\n\r\n        const classes = classnames({\r\n            [`${prefix}-mask`]: true,\r\n            [`${prefix}-mask-fixed`]: fixed,\r\n            [maskProps.className]: maskProps.className,\r\n            [maskClassName]: maskClassName\r\n        });\r\n\r\n        const mStyle = {};\r\n\r\n        if (this.shouldHide()) {\r\n            mStyle.display = \"none\";\r\n        }\r\n\r\n        return (\r\n            <CSSTransition\r\n                enter\r\n                exit\r\n                appear\r\n                classNames={{}}\r\n                timeout={timeout}\r\n                addEndListener={(_, cb) => timeout == null && cb()}\r\n                {...maskTransition}\r\n                in={mask && visible}\r\n                onEnter={this.onEnter.bind(this, maskTransition)}\r\n                onExited={this.onExited.bind(this, maskTransition)}\r\n                unmountOnExit={destroyOnHide}\r\n                mountOnEnter={lazyMount}\r\n            >\r\n                <MaskComponent\r\n                    {...maskProps}\r\n                    ref={this.saveRef.bind(this, \"popupMask\")}\r\n                    style={{\r\n                        ...maskStyle,\r\n                        ...mStyle\r\n                    }}\r\n                    className={classes}\r\n                />\r\n            </CSSTransition>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            style,\r\n            prefix,\r\n            className,\r\n            fixed,\r\n            timeout,\r\n            visible,\r\n            children,\r\n            lazyMount,\r\n            destroyOnHide,\r\n            rootClassName,\r\n            rootComponent: RootComponent,\r\n            component: Component,\r\n            transition,\r\n            ...childProps\r\n        } = this.props;\r\n\r\n        delete childProps.mask;\r\n        delete childProps.maskProps;\r\n        delete childProps.maskStyle;\r\n        delete childProps.maskClassName;\r\n        delete childProps.maskComponent;\r\n        delete childProps.maskTransition;\r\n\r\n        const rootProps = {};\r\n        if (RootComponent !== Fragment) {\r\n            rootProps.ref = this.saveRef.bind(this, \"popupRoot\");\r\n            rootProps.className = classnames({\r\n                [`${prefix}-root`]: true,\r\n                [rootClassName]: rootClassName\r\n            });\r\n        }\r\n\r\n        const classes = classnames({\r\n            [prefix]: true,\r\n            [`${prefix}-fixed`]: fixed,\r\n            [className]: className\r\n        });\r\n\r\n        const pStyle = {};\r\n\r\n        if (this.shouldHide()) {\r\n            pStyle.display = \"none\";\r\n        }\r\n\r\n        return (\r\n            <TransitionGroupContext.Provider value={null}>\r\n                <RootComponent>\r\n                    {this.renderPopupMask()}\r\n                    <CSSTransition\r\n                        enter\r\n                        exit\r\n                        appear\r\n                        classNames={{}}\r\n                        timeout={timeout}\r\n                        addEndListener={(_, cb) => timeout == null && cb()}\r\n                        {...transition}\r\n                        in={visible}\r\n                        onEnter={this.onEnter.bind(this, transition)}\r\n                        onExited={this.onExited.bind(this, transition)}\r\n                        unmountOnExit={destroyOnHide}\r\n                        mountOnEnter={lazyMount}\r\n                    >\r\n                        {status => {\r\n                            this.transitionStatus = status;\r\n                            return (\r\n                                <Component\r\n                                    {...childProps}\r\n                                    ref={this.saveRef.bind(this, \"popup\")}\r\n                                    style={{\r\n                                        ...style,\r\n                                        ...pStyle\r\n                                    }}\r\n                                    className={classes}\r\n                                >\r\n                                    {typeof children === \"function\"\r\n                                        ? children(status)\r\n                                        : children}\r\n                                </Component>\r\n                            );\r\n                        }}\r\n                    </CSSTransition>\r\n                </RootComponent>\r\n            </TransitionGroupContext.Provider>\r\n        );\r\n    }\r\n}\r\n\r\nPopup.propTypes = {\r\n    prefix: PropTypes.string,\r\n    style: PropTypes.object,\r\n    className: PropTypes.string,\r\n    rootClassName: PropTypes.string,\r\n\r\n    fixed: PropTypes.bool,\r\n    visible: PropTypes.bool,\r\n    lazyMount: PropTypes.bool,\r\n    transition: PropTypes.object,\r\n    destroyOnHide: PropTypes.bool,\r\n\r\n    mask: PropTypes.bool,\r\n    maskStyle: PropTypes.object,\r\n    maskProps: PropTypes.object,\r\n    maskClassName: PropTypes.string,\r\n    maskTransition: PropTypes.object,\r\n\r\n    component: PropTypes.elementType,\r\n    maskComponent: PropTypes.elementType,\r\n    rootComponent: PropTypes.elementType,\r\n\r\n    // 动画超时时间，建议在transition和maskTransition设置\r\n    timeout: PropTypes.oneOfType([PropTypes.number, PropTypes.object])\r\n};\r\n\r\nPopup.defaultProps = {\r\n    prefix: \"nex-popup\",\r\n    style: {},\r\n    className: \"\",\r\n    rootClassName: \"\",\r\n\r\n    fixed: false,\r\n    visible: false,\r\n    //初始未显示的情况下不渲染组件，作用同react-transition-group的mountOnEnter\r\n    lazyMount: true,\r\n    //popup动画配置参数参考react-transition-group\r\n    //http://reactcommunity.org/react-transition-group/css-transition\r\n    transition: {},\r\n    //visible=false时移除组件，作用同react-transition-group的unmountOnExit\r\n    destroyOnHide: true,\r\n\r\n    mask: false,\r\n    maskStyle: {},\r\n    maskProps: {},\r\n    maskClassName: \"\",\r\n    //popupMask动画配置参数参考react-transition-group\r\n    //http://reactcommunity.org/react-transition-group/css-transition\r\n    maskTransition: {},\r\n\r\n    component: \"div\",\r\n    maskComponent: \"div\",\r\n    rootComponent: Fragment\r\n};\r\n\r\nexport default Popup;\r\n"],"sourceRoot":""}